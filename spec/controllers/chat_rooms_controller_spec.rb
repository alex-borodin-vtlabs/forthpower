require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ChatRoomsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # ChatRoom. As you add validations to ChatRoom, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:valid_chat_room)
  }

  let(:invalid_attributes) {
    attributes_for(:invalid_chat_room)
  }

  describe "GET #index" do
    it "assigns all chat_rooms as @chat_rooms" do
      chat_room = FactoryGirl.create(:valid_chat_room)
      get :index, params: {}
      expect(assigns(:chat_rooms)).to eq([chat_room])
    end
  end

  describe "GET #show" do
    it "assigns the requested chat_room as @chat_room" do
      chat_room = FactoryGirl.create(:valid_chat_room)
      get :show, params: {id: chat_room.to_param}
      expect(assigns(:chat_room)).to eq(chat_room)
    end
  end

  describe "GET #new" do
    context 'author' do
      login_user_with_role(:author_user)
      it "assigns a new chat_room as @chat_room" do
        get :new
        expect(assigns(:chat_room)).to be_a_new(ChatRoom)
      end
    end
    context 'user' do
      login_user_with_role(:user)
      it "should route to root" do
        get :new
        expect(response).to redirect_to(root_path)
      end
    end
    context 'not logged in' do
      it "should route to sign in" do
        get :new
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

  describe "POST #create" do
    context 'author' do
      login_user_with_role(:author_user)
      context "with valid params" do
        it "creates a new ChatRoom" do
          expect {
            post :create, params: {chat_room: valid_attributes}
          }.to change(ChatRoom, :count).by(1)
        end

        it "assigns a newly created chat_room as @chat_room" do
          post :create, params: {chat_room: valid_attributes}
          expect(assigns(:chat_room)).to be_a(ChatRoom)
          expect(assigns(:chat_room)).to be_persisted
        end

        it "redirects to the created chat_room" do
          post :create, params: {chat_room: valid_attributes}
          expect(response).to redirect_to(ChatRoom.last)
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved chat_room as @chat_room" do
          post :create, params: {chat_room: invalid_attributes}
          expect(assigns(:chat_room)).to be_a_new(ChatRoom)
        end

        it "re-renders the 'new' template" do
          post :create, params: {chat_room: invalid_attributes}
          expect(response).to render_template("new")
        end
      end
    end
    context 'user' do
      login_user_with_role(:user)
      it "should route to root" do
        get :new
        expect(response).to redirect_to(root_path)
      end
    end
    context 'not logged in' do
      it "should route to sign in" do
        get :new
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end
end
